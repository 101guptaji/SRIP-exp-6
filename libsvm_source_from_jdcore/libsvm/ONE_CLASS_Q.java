package libsvm;













































































































































































































































































































































































































class ONE_CLASS_Q
  extends Kernel
{
  private final Cache cache;
  










































































































































































































































































































































































































  private final double[] QD;
  











































































































































































































































































































































































































  ONE_CLASS_Q(svm_problem paramSvm_problem, svm_parameter paramSvm_parameter)
  {
    super(l, x, paramSvm_parameter);
    cache = new Cache(l, (cache_size * 1048576.0D));
    QD = new double[l];
    for (int i = 0; i < l; i++) {
      QD[i] = kernel_function(i, i);
    }
  }
  
  float[] get_Q(int paramInt1, int paramInt2) {
    float[][] arrayOfFloat = new float[1][];
    int i;
    if ((i = cache.get_data(paramInt1, arrayOfFloat, paramInt2)) < paramInt2)
    {
      for (int j = i; j < paramInt2; j++)
        arrayOfFloat[0][j] = ((float)kernel_function(paramInt1, j));
    }
    return arrayOfFloat[0];
  }
  
  double[] get_QD()
  {
    return QD;
  }
  
  void swap_index(int paramInt1, int paramInt2)
  {
    cache.swap_index(paramInt1, paramInt2);
    super.swap_index(paramInt1, paramInt2);
    double d = QD[paramInt1];QD[paramInt1] = QD[paramInt2];QD[paramInt2] = d;
  }
}
