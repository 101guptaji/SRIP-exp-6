package libsvm;



























































































































































class SVR_Q
  extends Kernel
{
  private final int l;
  
























































































































































  private final Cache cache;
  
























































































































































  private final byte[] sign;
  
























































































































































  private final int[] index;
  
























































































































































  private int next_buffer;
  
























































































































































  private float[][] buffer;
  
























































































































































  private final double[] QD;
  

























































































































































  SVR_Q(svm_problem paramSvm_problem, svm_parameter paramSvm_parameter)
  {
    super(l, x, paramSvm_parameter);
    l = l;
    cache = new Cache(l, (cache_size * 1048576.0D));
    QD = new double[2 * l];
    sign = new byte[2 * l];
    index = new int[2 * l];
    for (int i = 0; i < l; i++)
    {
      sign[i] = 1;
      sign[(i + l)] = -1;
      index[i] = i;
      index[(i + l)] = i;
      QD[i] = kernel_function(i, i);
      QD[(i + l)] = QD[i];
    }
    buffer = new float[2][2 * l];
    next_buffer = 0;
  }
  
  void swap_index(int paramInt1, int paramInt2)
  {
    int i = sign[paramInt1];sign[paramInt1] = sign[paramInt2];sign[paramInt2] = i;
    i = index[paramInt1];index[paramInt1] = index[paramInt2];index[paramInt2] = i;
    double d = QD[paramInt1];QD[paramInt1] = QD[paramInt2];QD[paramInt2] = d;
  }
  
  float[] get_Q(int paramInt1, int paramInt2)
  {
    float[][] arrayOfFloat = new float[1][];
    int j = index[paramInt1];
    if (cache.get_data(j, arrayOfFloat, l) < l)
    {
      for (i = 0; i < l; i++) {
        arrayOfFloat[0][i] = ((float)kernel_function(j, i));
      }
    }
    
    float[] arrayOfFloat1 = buffer[next_buffer];
    next_buffer = (1 - next_buffer);
    int k = sign[paramInt1];
    for (int i = 0; i < paramInt2; i++)
      arrayOfFloat1[i] = (k * sign[i] * arrayOfFloat[0][index[i]]);
    return arrayOfFloat1;
  }
  
  double[] get_QD()
  {
    return QD;
  }
}
